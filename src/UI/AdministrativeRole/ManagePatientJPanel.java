/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.AdministrativeRole;

import Business.Creator;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Person.Doctor;
import Business.Person.Patient;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EntAdminWorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aayush
 */
public class ManagePatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
//    private EcoSystem system;
    private Organization orgPatient;
    private Organization cPatientOrganization;
    private Creator creator;
    private String na;

    public ManagePatientJPanel(JPanel userProcessContainer, Enterprise enterprise, Organization cPO, Creator creator) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.cPatientOrganization = cPO;
        this.creator = creator;
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof PatientOrganization) {
                orgPatient = org;
            }
        }
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) patientjTable1.getModel();

        dtm.setRowCount(0);
        for (Person person : orgPatient.getPersonDirectory().getPersonList()) {
            if (person instanceof Patient) {
                Patient patient = (Patient) person;
                Object[] row = new Object[4];
                row[0] = patient;
                row[1] = patient.getMRN();
                row[2] = orgPatient.getName();

                if (patient.getAdminDoctorAssign() == null) {
                    na = "Not Assigned yet";
                } else {
                    na = patient.getAdminDoctorAssign();
                }
                row[3] = na;
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientjTable1 = new javax.swing.JTable();
        createPatientjButton1 = new javax.swing.JButton();
        deletejButton1 = new javax.swing.JButton();
        viewPatientjButton1 = new javax.swing.JButton();
        backjButton1 = new javax.swing.JButton();
        assignADoctorjButton1 = new javax.swing.JButton();
        refreshjButton1 = new javax.swing.JButton();

        patientjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "MRN", "Organization", "Doctor Assigned"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientjTable1);

        createPatientjButton1.setText("Create Patient Profile>>");
        createPatientjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPatientjButton1ActionPerformed(evt);
            }
        });

        deletejButton1.setText("Delete Patient");
        deletejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletejButton1ActionPerformed(evt);
            }
        });

        viewPatientjButton1.setText("View Patient Demographics");
        viewPatientjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientjButton1ActionPerformed(evt);
            }
        });

        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });

        assignADoctorjButton1.setText("Assign a doctor>>");
        assignADoctorjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignADoctorjButton1ActionPerformed(evt);
            }
        });

        refreshjButton1.setText("Refresh");
        refreshjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backjButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createPatientjButton1)
                        .addGap(77, 77, 77))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewPatientjButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(assignADoctorjButton1)
                        .addGap(93, 93, 93))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshjButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deletejButton1)))
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletejButton1)
                    .addComponent(refreshjButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewPatientjButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(assignADoctorjButton1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(backjButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(createPatientjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createPatientjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPatientjButton1ActionPerformed
        // TODO add your handling code here:
        CreatePatientJPanel cpjp = new CreatePatientJPanel(userProcessContainer, enterprise, cPatientOrganization);
        userProcessContainer.add("CreatePatientJPanel", cpjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_createPatientjButton1ActionPerformed

    private void deletejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletejButton1ActionPerformed
        // TODO add your handling code here:
        int row = patientjTable1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "select a row");
        } else {
            int selectedValue = JOptionPane.showConfirmDialog(null, "Are you Sure you want to Delete?", "WARNING", JOptionPane.YES_NO_OPTION);

            if (selectedValue == JOptionPane.YES_OPTION) {
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof PatientOrganization) {
                        Patient patient = (Patient) patientjTable1.getValueAt(row, 0);
                        organization.getPersonDirectory().getPersonList().remove(patient);
                        organization.getPersonDirectory().getPersonList().remove(patient);

                        Person p = (Patient) patient;

                        //// USER ACCOUNT KO DELETE KARNA HAI \\\
//                        for (UserAccount ua : cPatientOrganization.getUserAccountDirectory().getUserAccountList()) {
//                            if (ua.getPerson().equals(p)) {
//                                cPatientOrganization.getUserAccountDirectory().getUserAccountList().remove(ua);
//                            }
//                        }
                        populateTable();
                    }
                }
            }
        }
    }//GEN-LAST:event_deletejButton1ActionPerformed

    private void viewPatientjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientjButton1ActionPerformed
        // TODO add your handling code here:

        int row = patientjTable1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "select a row");
        } else {

            Patient patient = (Patient) patientjTable1.getValueAt(row, 0);

            ViewPatientJPanel vpjp = new ViewPatientJPanel(userProcessContainer, patient);
            userProcessContainer.add("ViewPatientJPanel", vpjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }


    }//GEN-LAST:event_viewPatientjButton1ActionPerformed

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void assignADoctorjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignADoctorjButton1ActionPerformed
        // TODO add your handling code here:
        int row = patientjTable1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "select a row");
        } else {

            Patient patient = (Patient) patientjTable1.getValueAt(row, 0);
            if(patient.getAdminDoctorAssign() != null)
            {
                JOptionPane.showMessageDialog(null, "Dr. "+patient.getPrefferedDoctor()+" already assigned.");
                return;
            }
            
            Doctor doctor = patient.getPrefferedDoctor();
                    
            EntAdminWorkRequest request = new EntAdminWorkRequest();
            request.setEntSender(enterprise);
            request.setPatient(patient);
            request.setDoctor(doctor);
            request.setMessage(patient+" assigned to Dr. "+doctor);
            request.setStatus("Sent by admin");
            patient.setEntPrefDoc(enterprise);
            patient.setAdminDoctorAssign("Dr "+doctor);
            
            doctor.getWorkQueue().getWorkRequestList().add(request);
            patient.getWorkQueue().getWorkRequestList().add(request);
            
            populateTable();
        }
    }//GEN-LAST:event_assignADoctorjButton1ActionPerformed

    private void refreshjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButton1ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_refreshjButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignADoctorjButton1;
    private javax.swing.JButton backjButton1;
    private javax.swing.JButton createPatientjButton1;
    private javax.swing.JButton deletejButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientjTable1;
    private javax.swing.JButton refreshjButton1;
    private javax.swing.JButton viewPatientjButton1;
    // End of variables declaration//GEN-END:variables
}
