/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.DoctorRole;

import Business.Encounter.Encounter;
import Business.Enterprise.Enterprise;
import Business.Person.Doctor;
import Business.Person.Patient;
import Business.WorkQueue.EmergencyDoctorEnquiryWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aayush
 */
public class ViewEmergencyDetailsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewEmergencyDetailsJPanel
     */
    private JPanel userProcessContainer;
    private Doctor doctor;
    private Enterprise enterprise;
    private Patient patient;

    public ViewEmergencyDetailsJPanel(JPanel upc, Doctor doctor) {
        initComponents();
        userProcessContainer = upc;
        this.doctor = doctor;

        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) emergencyEnquiryjTable1.getModel();
        dtm.setRowCount(0);

        Object[] row = new Object[3];
        for (WorkRequest request : doctor.getWorkQueue().getWorkRequestList()) {
            if (request instanceof EmergencyDoctorEnquiryWorkRequest) {
                EmergencyDoctorEnquiryWorkRequest edewr = (EmergencyDoctorEnquiryWorkRequest) request;

                {
                    row[0] = edewr.getMRN();
                    row[1] = edewr.getEntSender();
                    row[2] = edewr;

                    dtm.addRow(row);
                }
            }
        }
    }

    private void populateEncounter() {

        DefaultTableModel dtm = (DefaultTableModel) encounterjTable1.getModel();
        dtm.setRowCount(0);

        Object[] row = new Object[2];

        int selectedRow = emergencyEnquiryjTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "select a row");
            return;
        }
        WorkRequest request = (WorkRequest) emergencyEnquiryjTable1.getValueAt(selectedRow, 2);
        EmergencyDoctorEnquiryWorkRequest edewr = (EmergencyDoctorEnquiryWorkRequest) request;

        for (Encounter encounter : edewr.getEncounterList()) {
            row[0] = encounter;
            row[1] = encounter.getEncounterDate();

            dtm.addRow(row);
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        emergencyEnquiryjTable1 = new javax.swing.JTable();
        viewEncountersjButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        encounterjTable1 = new javax.swing.JTable();
        viewEncounterDetailsjButton1 = new javax.swing.JButton();
        addEncounterjButton2 = new javax.swing.JButton();
        backjButton1 = new javax.swing.JButton();

        emergencyEnquiryjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "MRN", "Enterprise", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(emergencyEnquiryjTable1);

        viewEncountersjButton1.setText("View Encounter(s)");
        viewEncountersjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEncountersjButton1ActionPerformed(evt);
            }
        });

        encounterjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Encounter ID", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(encounterjTable1);

        viewEncounterDetailsjButton1.setText("View Encounter Details");
        viewEncounterDetailsjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEncounterDetailsjButton1ActionPerformed(evt);
            }
        });

        addEncounterjButton2.setText("Add Encounter");
        addEncounterjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEncounterjButton2ActionPerformed(evt);
            }
        });

        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(viewEncountersjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(169, 169, 169)
                                .addComponent(addEncounterjButton2))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(viewEncounterDetailsjButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backjButton1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewEncountersjButton1)
                    .addComponent(addEncounterjButton2))
                .addGap(75, 75, 75)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewEncounterDetailsjButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewEncountersjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEncountersjButton1ActionPerformed
        // TODO add your handling code here:
        populateEncounter();
    }//GEN-LAST:event_viewEncountersjButton1ActionPerformed

    private void addEncounterjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEncounterjButton2ActionPerformed
        // TODO add your handling code here:

        int selectedRow = emergencyEnquiryjTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "select a row");
            return;
        }
        WorkRequest request = (WorkRequest) emergencyEnquiryjTable1.getValueAt(selectedRow, 2);
        EmergencyDoctorEnquiryWorkRequest edewr = (EmergencyDoctorEnquiryWorkRequest) request;
        for (Encounter encounter : edewr.getEncounterList()) {
            patient = encounter.getPatient();
            break;
        }
        enterprise = edewr.getEntSender();
        AddemergencyEncounterJPanel aeejp = new AddemergencyEncounterJPanel(userProcessContainer, doctor, enterprise, patient);
        userProcessContainer.add("addEmergencyEncounterJPanel", aeejp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_addEncounterjButton2ActionPerformed

    private void viewEncounterDetailsjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEncounterDetailsjButton1ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = encounterjTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "select a row");
            return;
        }
        Encounter enc = (Encounter)encounterjTable1.getValueAt(selectedRow, 0);
        ViewEmergencyEncounterDetailsJP veed = new ViewEmergencyEncounterDetailsJP(userProcessContainer, enc);
        userProcessContainer.add("viewEmergEncounterDetailsJP", veed);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewEncounterDetailsjButton1ActionPerformed

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEncounterjButton2;
    private javax.swing.JButton backjButton1;
    private javax.swing.JTable emergencyEnquiryjTable1;
    private javax.swing.JTable encounterjTable1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton viewEncounterDetailsjButton1;
    private javax.swing.JButton viewEncountersjButton1;
    // End of variables declaration//GEN-END:variables
}
